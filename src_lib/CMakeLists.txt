#
#
# Library Target: linked against main and against tests.

# Generate a config.vala file, which can be used for version
# information and feature detection.
configure_file (
    "${CMAKE_CURRENT_SOURCE_DIR}/config.vala.in"
    "${CMAKE_CURRENT_BINARY_DIR}/config.vala"
    @ONLY)

# You can re-type these if you prefer, but putting them in variables
# makes it easier to reuse them, and helps explain what each command
# needs to include.

# These are the Vala sources you want to build your library out of.
set(MY_PROJECT_VALA_SOURCES
    "${CMAKE_CURRENT_BINARY_DIR}/config.vala"
    my_class.vala)

# Any dependencies.
set(MY_PROJECT_VALA_PACKAGES
    gio-2.0
    gee-0.8)

# Compile Vala -> C
vala_precompile(
    # vala_precompile will populate the MY_PROJECT_C_SOURCES variable
    # with the list of files generated by valac.
    MY_PROJECT_C_SOURCES
    ${MY_PROJECT_VALA_SOURCES}
    PACKAGES ${MY_PROJECT_VALA_PACKAGES}
    GENERATE_HEADER ${MY_PROJECT_HEADER}
    GENERATE_VAPI ${MY_PROJECT_HEADER})

# Generate a .gitignore
file(WRITE  ".gitignore" "# Automatically generated by CMake, do not modify.\n")
foreach(file
    ".gitignore"
    "${CMAKE_SHARED_LIBRARY_PREFIX}${MY_PROJECT_LIBRARY_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}"
    "${CMAKE_STATIC_LIBRARY_PREFIX}${MY_PROJECT_LIBRARY_NAME}${CMAKE_STATIC_LIBRARY_SUFFIX}"
    "${MY_PROJECT_PKG_NAME}.pc"
    "config.vala")
  file(APPEND ".gitignore" "/${file}\n")
endforeach(file)
foreach(file ${MY_PROJECT_C_SOURCES})
  string(REPLACE "${CMAKE_CURRENT_BINARY_DIR}/" "" file ${file})
  file(APPEND ".gitignore" "/${file}\n")
endforeach(file)

# Install our VAPI
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MY_PROJECT_PKG_NAME}.vapi
    DESTINATION ${CMAKE_INSTALL_DATADIR}/vala/vapi)

# Compile the library.
#
# By default, we create and install a shared library.  If you don't
# want to do that, you can change "SHARED" in the below function call
# to "STATIC", and comment out everything *after* this function call.
add_library(${MY_PROJECT_LIBRARY_NAME}
    SHARED
    ${MY_PROJECT_C_SOURCES})

# If you don't want to build and install a shared library, comment out
# everything below this point.

# Set the library's version information
set_target_properties (${MY_PROJECT_LIBRARY_NAME} PROPERTIES
    SOVERSION "${MY_PROJECT_SOVERSION_CURRENT}.${MY_PROJECT_SOVERSION_REVISION}.${MY_PROJECT_SOVERSION_AGE}"
    VERSION   "${MY_PROJECT_SOVERSION_CURRENT}.${MY_PROJECT_SOVERSION_REVISION}")

# Install the library
install (TARGETS ${MY_PROJECT_LIBRARY_NAME}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}  # On Windows, the DLL goes in the same place as the executables
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}  # This is where shared libraries (*.so on Linux, *.dynlib on OS X)
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}) # Finally, this is where static libraries (*.a) go

# Install the C header
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MY_PROJECT_HEADER}.h
    DESTINATION ${CMAKE_INSTALL_FULL_INCLUDEDIR})

# Install our VAPI
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MY_PROJECT_PKG_NAME}.vapi
    DESTINATION ${CMAKE_INSTALL_DATADIR}/vala/vapi)

# Generate and install a pkg-config file
configure_file (
    "${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}.pc.in"
    "${CMAKE_CURRENT_BINARY_DIR}/${MY_PROJECT_PKG_NAME}.pc"
    @ONLY)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${MY_PROJECT_PKG_NAME}.pc
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)

# Generate documentation
find_package(Valadoc)
include(UseValadoc)
if(${VALADOC_FOUND})
    valadoc_generate(html
        PACKAGE_NAME ${MY_PROJECT_PKG_NAME}
        PACKAGE_VERSION "${MY_PROJECT_VERSION_MAJOR}.${MY_PROJECT_VERSION_MINOR}.${MY_PROJECT_VERSION_REVISION}"
        SOURCES ${MY_PROJECT_VALA_SOURCES}
        PACKAGES ${MY_PROJECT_VALA_PACKAGES})
endif()
