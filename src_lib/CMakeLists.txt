#
#
# Library Target: linked against main and against tests.

# Generate a config.vala file, which can be used for version
# information and feature detection.
configure_file (
    "${CMAKE_CURRENT_SOURCE_DIR}/config.vala.in"
    "${CMAKE_CURRENT_BINARY_DIR}/config.vala"
    @ONLY)

# Compile Vala -> C
vala_precompile(MY_PROJECT_C_SOURCES
    "${CMAKE_CURRENT_BINARY_DIR}/config.vala"
    my_class.vala
PACKAGES
    gio-2.0
    gee-0.8
    posix
GENERATE_HEADER
    my-project-${MY_PROJECT_VERSION_API}
GENERATE_VAPI
    my-project-${MY_PROJECT_VERSION_API})

# Generate a .gitignore
file(WRITE  ".gitignore" "# Automatically generated by CMake, do not modify.\n")
foreach(file
    ".gitignore"
    "${CMAKE_SHARED_LIBRARY_PREFIX}my-project-${MY_PROJECT_VERSION_API}${CMAKE_SHARED_LIBRARY_SUFFIX}"
    "${CMAKE_STATIC_LIBRARY_PREFIX}my-project-${MY_PROJECT_VERSION_API}${CMAKE_STATIC_LIBRARY_SUFFIX}"
    "my-project-${MY_PROJECT_VERSION_API}.pc"
    "config.vala")
  file(APPEND ".gitignore" "/${file}\n")
endforeach(file)
foreach(file ${MY_PROJECT_C_SOURCES})
  string(REPLACE "${CMAKE_CURRENT_BINARY_DIR}/" "" file ${file})
  file(APPEND ".gitignore" "/${file}\n")
endforeach(file)

# Compile the library.
#
# By default, we create and install a shared library.  If you don't
# want to do that, you can change "SHARED" in the below function call
# to "STATIC", and comment out everything *after* this function call.
add_library(my-project-${MY_PROJECT_VERSION_API}
    SHARED
    ${MY_PROJECT_C_SOURCES})

# If you don't want to build and install a shared library, comment out
# everything below this point.

# Set the library's version information
set_target_properties ("my-project-${MY_PROJECT_VERSION_API}" PROPERTIES
    SOVERSION "${MY_PROJECT_SOVERSION_CURRENT}.${MY_PROJECT_SOVERSION_REVISION}.${MY_PROJECT_SOVERSION_AGE}"
    VERSION   "${MY_PROJECT_SOVERSION_CURRENT}.${MY_PROJECT_SOVERSION_REVISION}")

# Install the library
install (TARGETS my-project-${MY_PROJECT_VERSION_API}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}  # On Windows, the DLL goes in the same place as the executables
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}  # This is where shared libraries (*.so on Linux, *.dynlib on OS X)
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}) # Finally, this is where static libraries (*.a) go

# Install the C header
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/my-project-${MY_PROJECT_VERSION_API}.h
    DESTINATION ${CMAKE_INSTALL_FULL_INCLUDEDIR})

# Install our VAPI
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/my-project-${MY_PROJECT_VERSION_API}.vapi
    DESTINATION ${CMAKE_INSTALL_DATADIR}/vala/vapi)

# Generate and install a pkg-config file
configure_file (
    "${CMAKE_CURRENT_SOURCE_DIR}/my-project.pc.in"
    "${CMAKE_CURRENT_BINARY_DIR}/my-project-${MY_PROJECT_VERSION_API}.pc"
    @ONLY)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/my-project-${MY_PROJECT_VERSION_API}.pc
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)

find_package(Valadoc)

if(VALADOC_FOUND)
    add_custom_target (doc
        ${VALADOC_EXECUTABLE}
            -o ${CMAKE_CURRENT_BINARY_DIR}/html
            ${CMAKE_VALA_FLAGS}
            --package-name=my-project-${MY_PROJECT_VERSION_API}
            --package-version="${MY_PROJECT_VERSION_MAJOR}.${MY_PROJECT_VERSION_MINOR}.${MY_PROJECT_VERSION_REVISION}"
            --doclet=html
            --pkg=gio-2.0
            --pkg=gee-0.8
            --pkg=posix
            "${CMAKE_CURRENT_BINARY_DIR}/config.vala"
            my_class.vala
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMENT "Generating API documentation with Valadoc" VERBATIM)
endif()
